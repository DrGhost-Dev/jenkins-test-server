name: Docker Image CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Decode AWS Secret Access Key
      id: decode_secret
      run: echo "decoded_key=$(echo ${{ secrets.AWS_SECRET_ACCESS_KEY }} | base64 --decode)" >> $GITHUB_OUTPUT
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ steps.decode_secret.outputs.decoded_key }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'false'

    - name: Decode AWS Secret Access Key
      id: decode_account_id
      run: echo "decoded_key=$(echo ${{ secrets.AWS_ACCOUNT_ID }} | base64 --decode)" >> $GITHUB_OUTPUT
      
    - name: Build and push Docker image to ECR
      env:
          # ECR 리포지토리 주소를 환경 변수로 설정
        ECR_REGISTRY: ${{ steps.decode_account_id.outputs.decoded_key  }}.dkr.ecr.ap-northeast-1.amazonaws.com
        ECR_REPOSITORY: testrepo
        IMAGE_TAG: v1 # Git 커밋 해시를 태그로 사용
      run: |
        docker build -t name/testrepo:v1 .
        docker tag name/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/name/${ECR_REPOSITORY}:$IMAGE_TAG
        docker push $ECR_REGISTRY/name/${ECR_REPOSITORY}:IMAGE_TAG
    
    # # 1. Harbor 레지스트리에 로그인하는 단계 추가
    # - name: Login to Harbor
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ${{ secrets.HARBOR_URL }}
    #     username: ${{ secrets.HARBOR_USERNAME }}
    #     password: ${{ secrets.HARBOR_PASSWORD }}

    # - name: Build and push the Docker image
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     file: ./Dockerfile
    #     push: true 
    #     tags: ${{ secrets.HARBOR_URL }}/library/test:v1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # - name: Decode AWS Secret Access Key
      #   id: decode_account_id
      #   run: echo "decoded_key=$(echo ${{ secrets.AWS_ACCOUNT_ID }} | base64 --decode)" >> $GITHUB_OUTPUT
      
      # - name: Build and push Docker image to ECR
      #   env:
      #     # ECR 리포지토리 주소를 환경 변수로 설정
      #     ECR_REGISTRY: ${{ steps.decode_account_id.outputs.decoded_key  }}.dkr.ecr.ap-northeast-1.amazonaws.com
      #     ECR_REPOSITORY: testrepo
      #     IMAGE_TAG: v1 # Git 커밋 해시를 태그로 사용
      #   run: |
      #     docker build -t name/testrepo:v1 .
      #     docker tag name/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/name/${ECR_REPOSITORY}:$IMAGE_TAG
      #     docker push $ECR_REGISTRY/name/${ECR_REPOSITORY}:IMAGE_TAG
      # - name: Login to Harbor
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ secrets.HARBOR_URL }}
      #     username: ${{ secrets.HARBOR_USERNAME }}
      #     password: ${{ secrets.HARBOR_PASSWORD }}
      
      - name: Decode AWS Secret Access Key
        id: decode_secret
        run: echo "decoded_key=$(echo ${{ secrets.AWS_SECRET_ACCESS_KEY }} | base64 --decode)" >> $GITHUB_OUTPUT
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ steps.decode_secret.outputs.decoded_key }}
          aws-region: ap-northeast-1

      - name: Install Ansible Collections And Run Ansible Navigator
        run: |
          pip install ansible-core==2.17.0
          ansible-galaxy collection install amazon.aws community.docker
          sudo apt install -y podman python3 python3-pip

          python3 -m venv .venv
          source .venv/bin/activate
          pip install ansible-navigator
          
          cd ansible

          ansible-navigator run playbook.yml \
          -i inventory.yml \
          --mode stdout

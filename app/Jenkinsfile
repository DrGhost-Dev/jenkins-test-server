pipeline {
	agent any
  environment {
    HARBOR_REGISTRY = "harbor.blockgateway.net:8081"
    HARBOR_PROJECT = "library"
    DOCKER_IMAGE = "mainnet-node"
    BUILD_NUMBER = "v2"
	}

  stages {
    stage('Checkout') {
      steps {
        echo 'Checking connection to GitHub...'
        git url: 'https://github.com/DrGhost-Dev/jenkins-test-server.git', branch: 'main'
      }
    }
    stage('Docker Image Build') {
      steps {
        dir('app'){
          script {
            def imageName = "${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${DOCKER_IMAGE}:${BUILD_NUMBER}"
            docker.build(imageName)
          }
        }
      }
    }

    stage('Push to Harbor') {
      steps {
        dir('app'){
          withCredentials([usernamePassword(credentialsId: 'Harbor', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]){
            script {
              def imageName = "${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${DOCKER_IMAGE}:${BUILD_NUMBER}"
              sh "docker login ${HARBOR_REGISTRY} -u ${HARBOR_USER} -p ${HARBOR_PASS}"
              docker.image(imageName).push()
            }
          }
        }
      }
    }
    // -------------- 하드 코딩 버전 ---------------
    // stage('Docker Image Build') {
    //   steps {
    //     sh '''
    //       docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} .
    //       docker build -t ${DOCKER_IMAGE}:latest .
    //     '''
    //   }
    // }

    // stage('Push to Harbor') {
    //   steps {
    //     withCredentials([usernamePassword(credentialsId: 'Harbor', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]){
    //       sh '''
    //         docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} harbor.blockgateway.net:8081/library/${DOCKER_IMAGE}:${BUILD_NUMBER}
    //         docker login harbor.blockgateway.net:8081 -u ${HARBOR_USER} -p ${HARBOR_PASS}
    //         docker push harbor.blockgateway.net:8081/library/${DOCKER_IMAGE}:${BUILD_NUMBER}
    //       '''
    //     }
    //   }
    // }
    // -------------------------------------------------

    stage('Deploy to EC2') {
      steps {
        dir('ansible'){
          sh '''
                # 디버깅 정보
                echo "=== Current directory ==="
                pwd
                echo "=== Files in ansible directory ==="
                ls -la
                
                # Python 가상환경 설정
                python3 -m venv .venv
                
                # ansible-navigator 설치
                ./.venv/bin/pip install ansible-navigator ansible-builder
                
                # 현재 작업 디렉토리 확인
                CURRENT_DIR=$(pwd)
                echo "Working directory: $CURRENT_DIR"
                
                # ansible-navigator 실행 (절대 경로 사용)
                ./.venv/bin/ansible-navigator run $CURRENT_DIR/playbook.yml \
                    -i $CURRENT_DIR/inventory.yml \
                    --mode stdout \
                    --execution-environment-volume-mounts "$CURRENT_DIR:/runner/project" \
                    -vvv
          '''
        }
      }
    }
  

//   post {
//     success { echo 'Deployment success' }
//     failure { echo 'Deployment failed' }
  }
}
